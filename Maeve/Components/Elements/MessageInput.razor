@using Maeve.Database
@using Microsoft.EntityFrameworkCore
@using Blazor.Heroicons.Solid
@using Maeve.ModelProviders

@inject IDbContextFactory<DataContext> DbContextFactory
@inject IModelProviderFactory ModelProviderFactory

<div class="flex flex-col gap-2 w-full">
    @if (_documents.Length > 0) {
        <div class="flex justify-end items-center gap-2">
            @if (_useDocument != null) {
                <div class="badge badge-soft badge-primary">
                    <DocumentTextIcon class="size-4"></DocumentTextIcon>

                    @_useDocument.Name

                    <button class="cursor-pointer" @onclick="() => _useDocument = null">
                        <XMarkIcon class="size-4"></XMarkIcon>
                    </button>
                </div>
            }
            <div class="dropdown dropdown-top dropdown-end">
                <div tabindex="0" role="button" class="btn btn-sm m-1">
                    <DocumentPlusIcon class="size-5"></DocumentPlusIcon>

                    Use document
                </div>
                <div
                    tabindex="0"
                    class="dropdown-content card card-sm bg-base-100 z-1 w-72 shadow-md">
                    <div class="card-body">
                        <div class="overflow-x-auto">
                            <table class="table table-sm table-zebra">
                                @foreach (var document in _documents) {
                                    <tr>
                                        <td>
                                            <DocumentTextIcon class="size-6"></DocumentTextIcon>
                                        </td>
                                        <td>
                                            <button class="cursor-pointer" @onclick="() => _useDocument = document">@document.Name</button>
                                        </td>
                                    </tr>
                                }
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    
    <textarea @bind="_query" class="textarea w-full bg-base-100" @bind:event="oninput" @onkeydown="OnKeyDown" disabled="@_isInputDisabled"></textarea>
</div>

@code {
    
    // - Properties
    
    [Parameter]
    public EventCallback<(string, Document?)> OnSendMessage { get; set; }

    
    // - Private Properties

    private string _query = "";
    private Document[] _documents = [];
    private Document? _useDocument;
    private bool _isInputDisabled;
    
    
    // - Functions

    protected override async Task OnInitializedAsync() {
        if (!RendererInfo.IsInteractive) return;

        var modelProvider = ModelProviderFactory.CreateDefaultModelProvider();
        _isInputDisabled = modelProvider == null || modelProvider.HasConfigurationError;

        await using var dataContext = await DbContextFactory.CreateDbContextAsync();
        
        _documents = await dataContext.Documents
            .Where(d => d.State == DocumentState.Vectorized)
            .OrderByDescending(d => d.UploadedAt)
            .AsNoTracking()
            .ToArrayAsync();
    }


    // - Private Functions

    private async Task OnKeyDown(KeyboardEventArgs e) {
        if ((e.Code == "Enter" || e.Code == "NumpadEnter") && !e.ShiftKey && _query.Trim() != "") {
            var query = _query;
            _query = "";
            await OnSendMessage.InvokeAsync((query, _useDocument));
        }
    }
}
