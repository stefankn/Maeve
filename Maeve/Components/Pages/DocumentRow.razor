@using Maeve.Database
@using Maeve.Documents

@inject IDocumentProcessor DocumentProcessor

@implements IDisposable

<li class="list-row">
    <div class="w-10 flex items-center justify-center">
        @if (_state != DocumentState.Vectorized && _state != DocumentState.Failed) {
            <span class="loading loading-bars loading-md size-8"></span>
        } else if (_state == DocumentState.Vectorized) {
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor" class="size-8">
                <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z"/>
            </svg>
        } else {
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor" class="size-8">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z" />
            </svg>
        }
    </div>
    <div class="list-col-grow">
        <a href="/documents/@Document.Filename" target="_blank">@Document.Name</a>
        <div class="text-secondary-content text-xs">@Document.UploadedAt.ToString("d MMMM yyyy, HH:mm")</div>
    </div>
    <div class="flex h-full items-center">
        <div class="badge @(_state == DocumentState.Vectorized ? "badge-success" : "badge-secondary")">
            @_state
        </div>
    </div>
    
    <button class="btn" @onclick="() => Delete.InvokeAsync(Document)">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
        </svg>
    </button>
</li>

@code {
    
    // - Properties

    [Parameter, EditorRequired]
    public required Document Document { get; set; }
    
    [Parameter]
    public EventCallback<Document> Delete { get; set; }
    
    
    // - Private Properties

    private IDisposable? _disposable;
    private DocumentState _state;
    
    
    // - Functions

    protected override void OnParametersSet() {
        _state = Document.State;
        
        if (Document.IsProcessed || _disposable != null) return;
        
        _disposable = DocumentProcessor.Observe(Document).Subscribe(document => {
            if (document == null) return;
            _state = document.State;
            InvokeAsync(StateHasChanged);
        });
    }

    // IDisposable Functions
    
    public void Dispose() {
        _disposable?.Dispose();
        _disposable = null;
    }
}
