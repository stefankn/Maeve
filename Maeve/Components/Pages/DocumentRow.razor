@using Maeve.Database
@using Maeve.Documents
@using Blazor.Heroicons.Outline

@inject IDocumentProcessor DocumentProcessor

@implements IDisposable

<li class="list-row">
    <div class="w-10 flex items-center justify-center">
        @if (_state != DocumentState.Vectorized && _state != DocumentState.Failed) {
            <span class="loading loading-bars loading-md size-8"></span>
        } else if (_state == DocumentState.Vectorized) {
            <DocumentTextIcon class="size-8"></DocumentTextIcon>
        } else {
            <ExclamationTriangleIcon class="size-8"></ExclamationTriangleIcon>
        }
    </div>
    <div class="list-col-grow">
        <a href="/documents/@Document.Filename" target="_blank">@Document.Name</a>
        <div class="text-secondary-content text-xs">@Document.UploadedAt.ToString("d MMMM yyyy, HH:mm")</div>
    </div>
    <div class="flex h-full items-center">
        <div class="badge @(_state == DocumentState.Vectorized ? "badge-success" : "badge-secondary")">
            @_state
        </div>
    </div>
    
    <button class="btn" @onclick="() => Delete.InvokeAsync(Document)">
        <TrashIcon class="size-6"></TrashIcon>
    </button>
</li>

@code {
    
    // - Properties

    [Parameter, EditorRequired]
    public required Document Document { get; set; }
    
    [Parameter]
    public EventCallback<Document> Delete { get; set; }
    
    
    // - Private Properties

    private IDisposable? _disposable;
    private DocumentState _state;
    
    
    // - Functions

    protected override void OnParametersSet() {
        _state = Document.State;
        
        if (Document.IsProcessed || _disposable != null) return;
        
        _disposable = DocumentProcessor.Observe(Document).Subscribe(document => {
            if (document == null) return;
            _state = document.State;
            InvokeAsync(StateHasChanged);
        });
    }

    // IDisposable Functions
    
    public void Dispose() {
        _disposable?.Dispose();
        _disposable = null;
    }
}
