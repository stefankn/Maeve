@page "/conversations/{id}"

@using Maeve.Conversations
@using Maeve.Database
@using Maeve.Extensions.Markdown
@using Maeve.Logging
@using Markdig
@using Message = Maeve.Database.Message
@using Role = Maeve.Database.Role
@using Blazor.Heroicons.Outline

@inject IConversationManager ConversationManager
@inject ILogger Logger
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@implements IDisposable

<PageTitle>Maeve</PageTitle>

<div class="flex flex-col gap-6 mb-56 w-full">
    <div class="flex justify-end items-center">
        <div class="join">
            <button class="btn btn-sm btn-soft btn-error join-item" @onclick="Delete">
                <TrashIcon class="size-4"></TrashIcon>
                Delete conversation
            </button>
        </div>
    </div>
    <div class="flex flex-col gap-2">
        @if (_isError) {
            <div class="w-full flex justify-center mt-20">
                <div role="alert" class="alert alert-error">
                    <span>There was a problem loading the conversation, please try again later</span>
                </div>
            </div>
        }
        else if (_isLoading) {
            <div class="w-full flex justify-center mt-20">
                <span class="loading loading-spinner loading-xl"></span>
            </div>
        }
        else {
            @foreach (var message in Messages) {
                <div class="chat @(message.Role == Role.Assistant ? "chat-start" : "chat-end")">
                    <div class="chat-bubble @(message.Role == Role.User ? "chat-bubble-primary" : "") text-sm">
                        @((MarkupString)Markdown.ToHtml(message.Content, _markdownPipeline))
                    </div>
                </div>
                <div class="flex @(message.Role == Role.Assistant ? "justify-start" : "justify-end") items-center w-full gap-2 ml-2">
                    <div class="flex items-center">
                        @if (message.Thoughts != null) {
                            <div class="dropdown dropdown-hover dropdown-top dropdown-start">
                                <div tabindex="0" role="button" class="btn btn-circle btn-xs m-1">
                                    <AcademicCapIcon class="size-4"></AcademicCapIcon>

                                </div>
                                <div
                                    tabindex="0"
                                    class="dropdown-content card card-sm bg-base-100 z-1 w-128 shadow-md">
                                    <div class="card-body">
                                        <p>@message.Thoughts</p>
                                    </div>
                                </div>
                            </div>
                        }
                        @if (message.Tools.Count > 0) {
                            <div class="dropdown dropdown-hover dropdown-top dropdown-start">
                                <div tabindex="0" role="button" class="btn btn-circle btn-xs m-1">
                                    <WrenchIcon class="size-4"></WrenchIcon>
                                </div>
                                <div
                                    tabindex="0"
                                    class="dropdown-content card card-sm bg-base-100 z-1 w-128 shadow-md">
                                    <div class="card-body">
                                        <table class="table table-zebra table-xs">
                                            <thead>
                                            <tr>
                                                <th>Function</th>
                                                <th>Arguments</th>
                                            </tr>
                                            </thead>
                                            <tbody>
                                            @foreach (var tool in message.Tools) {
                                                <tr>
                                                    <td>@tool.Function</td>
                                                    <td>@tool.ArgumentsDescription</td>
                                                </tr>
                                            }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="text-base-content/50 text-xs">@message.CreatedAt.ToString("d MMMM yyyy, HH:mm")</div>
                </div>
            }
        }

        @if (IsResponding || Response != null) {
            <div class="chat chat-start">
                <div class="chat-bubble text-sm @(Response != null ? "w-full" : "")">
                    @if (Response != null) {
                        @((MarkupString)Markdown.ToHtml(Response ?? "", _markdownPipeline))
                    } else {
                        <span class="loading loading-dots loading-md"></span>
                    }
                </div>
            </div>
        }

        @if (Thoughts != null && Response == null) {
            <div class="flex flex-col gap-2 pl-20">
                <div role="alert" class="alert alert-info alert-soft flex items-start gap-2">
                    <div class="min-w-8 animate-pulse">
                        <ClockIcon class="size-8"></ClockIcon>
                    </div>
                    <div class="flex flex-col gap-1">
                        <div class="font-semibold">Thinking...</div>
                        <div>@Thoughts</div>
                    </div>
                </div>

                @foreach (var tool in UsedTools) {
                    <div role="alert" class="alert alert-warning alert-soft flex items-center gap-2">
                        <div class="min-w-8 animate-pulse">
                            <WrenchIcon class="size-8"></WrenchIcon>
                        </div>
                        <div class="flex flex-col gap-1">
                            <div class="font-semibold">Tool call</div>
                            <div>@tool.Description</div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@if (!_isError) {
    <div class="fixed left-0 bottom-0 h-48 bg-base-100 w-full">
        <div class="flex">
            <div class="flex-1/4"></div>
            <div class="text-base-content flex justify-center items-center py-8 rounded-t-xl gap-2 bg-base-100 w-full h-full px-40">
                <MessageInput OnSendMessage="OnSendMessage"></MessageInput>
            </div>
        </div>
    </div>
}

@code {
    
    [Parameter]
    public required string Id { get; set; }
    
    // - Private Properties

    private IConversationContext? _conversationContext;
    private readonly MarkdownPipeline _markdownPipeline = new MarkdownPipelineBuilder()
        .UseAdvancedExtensions()
        .UseDaisyUi()
        .Build();

    private bool _isLoading = true;
    private bool _isError;

    private bool IsResponding => _conversationContext?.IsResponding ?? false;
    private string? Thoughts => _conversationContext?.Thoughts;
    private string? Response => _conversationContext?.Response;
    private Tool[] UsedTools => _conversationContext?.UsedTools ?? [];
    private Message[] Messages => _conversationContext?.Messages ?? [];
    
    
    // - Functions

    protected override void OnParametersSet() {
        if (!RendererInfo.IsInteractive) return;

        SetupConversation();
    }
    
    // IDisposable Functions
    
    public void Dispose() {
        if (_conversationContext == null) return;
        ConversationManager.LeaveConversation(_conversationContext);
    }


    // - Private Functions
    
    private void SetupConversation() {
        _isLoading = true;
        _isError = false;

        if (_conversationContext != null) {
            _conversationContext.OnNewMessage -= OnNewMessage;
            _conversationContext.OnThoughts -= OnThoughts;
            _conversationContext.OnResponse -= OnResponse;
            _conversationContext.OnToolInvocation -= OnToolInvocation;
        }

        try {
            _conversationContext = ConversationManager.StartConversation(Id);
        
            _conversationContext.OnNewMessage += OnNewMessage;
            _conversationContext.OnThoughts += OnThoughts;
            _conversationContext.OnResponse += OnResponse;
            _conversationContext.OnToolInvocation += OnToolInvocation;
        
            _isLoading = false;
        } catch (Exception e) {
            Console.WriteLine(e);
            _isLoading = false;
            _isError = true;
        }
    }

    private async Task OnSendMessage((string, Document?) message) {
        if (_conversationContext == null) return;
        
        await _conversationContext.SendMessage(message.Item1, message.Item2);
        await ScrollToBottom();
    }
    
    private void OnNewMessage(object? sender, Message message) {
        InvokeAsync(StateHasChanged);
        Task.Run(async () => await ScrollToBottom());
    }
    
    private void OnThoughts(object? sender, string? thoughts) {
        InvokeAsync(StateHasChanged);
        
        if (thoughts != null) {
            Task.Run(async () => await ScrollToBottom());
        }
    }
    
    private void OnResponse(object? sender, string? response) {
        InvokeAsync(StateHasChanged);

        if (response != null) {
            Task.Run(async () => await ScrollToBottom());
        }
    }
    
    private void OnToolInvocation(object? sender, Tool? tool) {
        InvokeAsync(StateHasChanged);

        if (tool != null) {
            Task.Run(async () => await ScrollToBottom());
        }
    }
    
    private async Task ScrollToBottom() {
        await JsRuntime.InvokeVoidAsync("maeve.scrollToBottom");
    }

    private async Task Delete() {
        if (_conversationContext == null) return;

        await ConversationManager.Delete(_conversationContext);
        NavigationManager.NavigateTo("/conversations");
    }
}
