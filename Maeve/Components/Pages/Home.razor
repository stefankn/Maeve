@page "/"

@using Maeve.Conversations
@using Maeve.Logging
@using Markdig
@using Message = Maeve.Database.Message
@using Role = Maeve.Database.Role

@inject IConversationContext ConversationContext
@inject ILogger Logger
@inject IJSRuntime JsRuntime

<PageTitle>Maeve</PageTitle>

<div class="flex flex-col mb-56">
    <div class="flex flex-col gap-2">
        @if (_isLoading) {
            <div class="w-full flex justify-center mt-20">
                <span class="loading loading-spinner loading-xl"></span>
            </div>
        } else {
            @foreach (var message in Messages) {
                <div class="chat @(message.Role == Role.Assistant ? "chat-start" : "chat-end")">
                    <div class="chat-bubble @(message.Role == Role.User ? "chat-bubble-primary" : "") text-sm">
                        @((MarkupString)Markdown.ToHtml(message.Content))
                    </div>
                </div>
                <div class="flex @(message.Role == Role.Assistant ? "justify-start" : "justify-end") items-center w-full gap-2">
                    <div class="text-base-content/50 text-xs">@message.CreatedAt.ToString("d MMMM yyyy, HH:mm")</div>
                </div>
            }
        }

        @if (_isResponding || _response != null) {
            <div class="chat chat-start">
                <div class="chat-bubble text-sm">
                    @if (_isResponding) {
                        <span class="loading loading-dots loading-md"></span>
                    }
                    else {
                        @((MarkupString)Markdown.ToHtml(_response ?? ""))
                    }
                </div>
            </div>
        }

        @if (_thoughts != null) {
            <div class="flex flex-col gap-2 pl-20">
                <div role="alert" class="alert alert-info alert-soft flex items-start gap-2">
                    <div class="min-w-8 animate-pulse">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"/>
                        </svg>
                    </div>
                    <span>@_thoughts</span>
                </div>

                @if (_toolCallDescription != null) {
                    <div role="alert" class="alert alert-warning alert-soft flex items-center gap-2">
                        <div class="min-w-8 animate-pulse">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M21.75 6.75a4.5 4.5 0 0 1-4.884 4.484c-1.076-.091-2.264.071-2.95.904l-7.152 8.684a2.548 2.548 0 1 1-3.586-3.586l8.684-7.152c.833-.686.995-1.874.904-2.95a4.5 4.5 0 0 1 6.336-4.486l-3.276 3.276a3.004 3.004 0 0 0 2.25 2.25l3.276-3.276c.256.565.398 1.192.398 1.852Z"/>
                                <path stroke-linecap="round" stroke-linejoin="round" d="M4.867 19.125h.008v.008h-.008v-.008Z"/>
                            </svg>
                        </div>
                        <span>@_toolCallDescription</span>
                    </div>
                }
            </div>
        }
    </div>
</div>

<div class="fixed bottom-0 container mx-auto h-48">
    <div class="text-base-content flex justify-center items-center py-8 rounded-t-xl gap-2 bg-base-100 h-full w-full px-10">
        <textarea @bind="_query" class="textarea w-full bg-base-100" @bind:event="oninput" @onkeydown="OnKeyDown"></textarea>
    </div>
</div>

@code {
    
    // - Private Properties

    private string _query = "";
    private bool _isLoading = true;
    private bool _isResponding;

    private string? _thoughts;
    private string? _response;
    private string? _toolCallDescription;
    
    private Message[] Messages => ConversationContext.Messages;

    protected override async Task OnInitializedAsync() {
        if (!RendererInfo.IsInteractive) return;
        
        ConversationContext.NewMessage += OnNewMessage;
        ConversationContext.Thoughts += OnThoughts;
        ConversationContext.Response += OnResponse;
        ConversationContext.ToolInvoked += OnToolInvocation;

        await ConversationContext.StartConversation();
        _isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await ScrollToBottom();
        }
    }


    // - Private Functions
    
    private async Task OnKeyDown(KeyboardEventArgs e) {
        if ((e.Code == "Enter" || e.Code == "NumpadEnter") && !e.ShiftKey) {
            await PerformQuery();
        }
    }

    private async Task PerformQuery() {
        _isResponding = true;
        await ConversationContext.SendMessage(_query);
    }
    
    private void OnNewMessage(object? sender, Message message) {
        if (message.Role == Role.User) {
            _query = "";
        }
        
        StateHasChanged();
    }
    
    private void OnThoughts(object? sender, string? thoughts) {
        _thoughts = thoughts;

        InvokeAsync(StateHasChanged);
        
        if (thoughts != null) {
            Task.Run(async () => await ScrollToBottom());
        }
    }
    
    private void OnResponse(object? sender, string? response) {
        _response = response;
        
        InvokeAsync(StateHasChanged);

        if (_response != null && _response.Trim() != "") {
            _isResponding = false;
        }

        if (response != null) {
            Task.Run(async () => await ScrollToBottom());
        }
    }
    
    private void OnToolInvocation(object? sender, string? toolCallDescription) {
        _toolCallDescription = toolCallDescription;
        InvokeAsync(StateHasChanged);

        if (toolCallDescription != null) {
            Task.Run(async () => await ScrollToBottom());
        }
    }
    
    private async Task ScrollToBottom() {
        await JsRuntime.InvokeVoidAsync("maeve.scrollToBottom");
    }
}
